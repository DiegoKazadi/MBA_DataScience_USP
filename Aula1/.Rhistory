"DistÃ¢ncia percorrida",
"SemÃ¡foros",
"PerÃ­odo",
"Perfil")
print(novos_nomes)
names(dataset_inicial) <- novos_nomes
head(dataset_inicial, n=5)
nova_base <- rename(dataset_inicial,
observacoes = ObservaÃ§Ãµes,
tempo = "Tempo para chegar",
distancia = "DistÃ¢ncia percorrida",
semaforos = "SemÃ¡foros",
periodo = "PerÃ­odo",
perfil = "Perfil")
nova_base <- rename(dataset_inicial,
observacoes = Observaões,
tempo = "Tempo para chegar",
distancia = "DistÃ¢ncia percorrida",
semaforos = "SemÃ¡foros",
periodo = "PerÃ­odo",
perfil = "Perfil")
nova_base <- rename(dataset_inicial,
observacoes = observacoesoes,
tempo = "Tempo para chegar",
distancia = "DistÃ¢ncia percorrida",
semaforos = "SemÃ¡foros",
periodo = "PerÃ­odo",
perfil = "Perfil")
nova_base <- rename(dataset_inicial,
observacoes = observacoes,
tempo = "Tempo para chegar",
distancia = "DistÃ¢ncia percorrida",
semaforos = "SemÃ¡foros",
periodo = "PerÃ­odo",
perfil = "Perfil")
head(nova_base, n=5)
nova_base <- rename(dataset_inicial,
observacoes = "observacoes",
tempo = "Tempo para chegar",
distancia = "DistÃ¢ncia percorrida",
semaforos = "SemÃ¡foros",
periodo = "PerÃ­odo",
perfil = "Perfil")
nova_base %>% rename(obs = observacoes,
temp = tempo,
dist = distancia,
sem = semaforos,
per = periodo,
perf = perfil)
nova_base %>% rename(obs = observacoes,
temp = tempo,
dist = distancia,
sem = semaforos,
per = periodo,
perf = perfil)
names(dataset_inicial) <- novos_nomes
novos_nomes <- c("ObservaÃ§Ãµes",
"Tempo para chegar",
"DistÃ¢ncia percorrida",
"SemÃ¡foros",
"PerÃ­odo",
"Perfil")
nova_base %>% rename(obs = observacoes,
temp = tempo,
dist = distancia,
sem = semaforos,
per = periodo,
perf = perfil)
head(nova_base, n=5)
novos_nomes <- c("Observacoes",
"Tempo para chegar",
"DistÃ¢ncia percorrida",
"SemÃ¡foros",
"PerÃ­odo",
"Perfil")
print(novos_nomes)
head(dataset_inicial, n=5)
nova_base <- rename(dataset_inicial,
observacoes = "Observacoes",
tempo = "Tempo para chegar",
distancia = "DistÃ¢ncia percorrida",
semaforos = "SemÃ¡foros",
periodo = "PerÃ­odo",
perfil = "Perfil")
nova_base <- rename(dataset_inicial,
observacoes = "observacoes",
tempo = "Tempo para chegar",
distancia = "DistÃ¢ncia percorrida",
semaforos = "SemÃ¡foros",
periodo = "PerÃ­odo",
perfil = "Perfil")
head(nova_base, n=5)
novos_nomes <- c("Observacoes",
"Tempo para chegar",
"DistÃ¢ncia percorrida",
"SemÃ¡foros",
"PerÃ­odo",
"Perfil")
print(novos_nomes)
names(dataset_inicial) <- novos_nomes
head(dataset_inicial, n=5)
nova_base <- rename(dataset_inicial,
observacoes = "observacoes",
tempo = "Tempo para chegar",
distancia = "DistÃ¢ncia percorrida",
semaforos = "SemÃ¡foros",
periodo = "PerÃ­odo",
perfil = "Perfil")
nova_base <- rename(dataset_inicial,
observacoes = "Observacoes",
tempo = "Tempo para chegar",
distancia = "DistÃ¢ncia percorrida",
semaforos = "SemÃ¡foros",
periodo = "PerÃ­odo",
perfil = "Perfil")
head(nova_base, n=5)
nova_base %>% rename(obs = observacoes,
temp = tempo,
dist = distancia,
sem = semaforos,
per = periodo,
perf = perfil)
nova_base_pipe <- nova_base %>% rename(obs = observacoes,
temp = tempo,
dist = distancia,
sem = semaforos,
per = periodo,
perf = perfil)
head(nova_base_pipe, n=5)
rm(nova_base_pipe) # Remove o objeto especificado do ambiente
nova_base %>% rename(obs = 1,
temp = 2,
dist = 3,
sem = 4,
per = 5,
perf = 6)
nova_base %>% rename(sem = 4,
perf = 6)
variavel_nova_1 <- c(1,2,3,4,5,6,7,8,9,10)
variavel_nova_2 <- c(11:20)
print(variavel_nova_1)
print(variavel_nova_2)
base_inclui <- mutate(nova_base,
variavel_nova_1,
variavel_nova_2)
View(base_inclui)
nova_base %>% rename(obs = observacoes,
temp = tempo,
dist = distancia,
sem = semaforos,
per = periodo,
perf = perfil) %>%
mutate(variavel_nova_1,
variavel_nova_2,
temp_novo = tempo*2)
nova_base %>% rename(obs = observacoes,
temp = tempo,
dist = distancia,
sem = semaforos,
per = periodo,
perf = perfil) %>%
mutate(variavel_nova_1,
variavel_nova_2,
temp_novo = temp*2)
base_texto_1 <- mutate(nova_base,
semaforos = replace(semaforos, semaforos==0, "Zero"),
semaforos = replace(semaforos, semaforos==1, "Um"),
semaforos = replace(semaforos, semaforos==2, "Dois"),
semaforos = replace(semaforos, semaforos==3, "TrÃªs"))
head(base_texto_1)
base_texto_2 <- mutate(nova_base,
perfil_novo = recode(perfil,
"calmo"="perfil 1",
"moderado"="perfil 2",
"agressivo"="perfil 3"))
head(base_texto_2)
base_texto_valores <- mutate(nova_base,
periodo = recode(periodo,
"ManhÃ£"=0,
"Tarde"=1))
head(base_texto_valores)
base_dummy <- mutate(nova_base, perfil_agressivo = recode(perfil,
"agressivo"=1,
"moderado"=0,
"calmo"=0),
perfil_moderado = recode(perfil,
"agressivo"=0,
"moderado"=1,
"calmo"=0),
perfil_calmo = recode(perfil,
"agressivo"=0,
"moderado"=0,
"calmo"=1))
View(base_dummy)
base_exclui <- transmute(nova_base,
observacoes, tempo,
variavel_nova_1, variavel_nova_2)
base_exclui_rename <- nova_base %>% transmute(observacoes, tempo,
variavel_nova_1) %>%
mutate(tempo_novo = recode(tempo,
"10"="dez",
"15"="quinze",
"20"="vinte",
"25"="vinte e cinco",
"30"="trinta",
"35"="trinta e cinco",
"40"="quarenta",
"50"="cinquenta",
"55"="cinquenta e cinco")) %>%
mutate(posicao = cut(tempo,
c(0, median(tempo), Inf),
c("menores",
"maiores")))
base_exclui_rename <- nova_base %>% transmute(observacoes, tempo,
variavel_nova_1) %>%
mutate(tempo_novo = recode(tempo,
"10"="dez",
"15"="quinze",
"20"="vinte",
"25"="vinte e cinco",
"30"="trinta",
"35"="trinta e cinco",
"40"="quarenta",
"50"="cinquenta",
"55"="cinquenta e cinco")) %>%
mutate(posicao = cut(tempo,
c(0, median(tempo), Inf),
c("menores",
"maiores")))
median(nova_base$tempo)
selecao_1 <- nova_base[,c("observacoes","tempo")] # critÃ©rios apÃ³s a vÃ­rgula
selecao_2 <- nova_base[,1:3] # selecionando pela posiÃ§Ã£o das colunas de 1 a 3
extrai_parte_1 <- nova_base[3:7, c("observacoes", "perfil")]
extrai_parte_2 <- nova_base[3:7, 1:2]
base_select_1 <- select(nova_base, observacoes, tempo) # especificando
base_select_2 <- select(nova_base,  everything(), -perfil) # todas menos uma
base_select_3 <- select(nova_base, observacoes:distancia) # de uma a outra
base_select_4 <- select(nova_base, starts_with("p")) # para algum prefixo comum
nova_base %>% select(observacoes, perfil, everything())
nova_base %>% relocate(perfil, .after = observacoes)
nova_base %>% relocate(perfil, .before = tempo)
descritivas_nova_base <- summarise(nova_base,
observaÃ§Ãµes=n(),
mÃ©dia=mean(tempo),
mediana=median(tempo),
desv_pad=sd(tempo),
mÃ­nimo=min(tempo),
mÃ¡ximo=max(tempo),
quartil_3=quantile(tempo, type=5, 0.75))
View(nova_base)
nova_base %>% select(tempo, semaforos, perfil, observacoes)
vetor_pull <- nova_base %>% pull(var = 3)
descritivas_nova_base <- summarise(nova_base,
observaÃ§Ãµes=n(),
mÃ©dia=mean(tempo),
mediana=median(tempo),
desv_pad=sd(tempo),
mÃ­nimo=min(tempo),
mÃ¡ximo=max(tempo),
quartil_3=quantile(tempo, type=5, 0.75))
descritivas_nova_base <- summarise(nova_base,
observaÃÃµes=n(),
mÃdia=mean(tempo),
mediana=median(tempo),
desv_pad=sd(tempo),
mÃnimo=min(tempo),
mÃximo=max(tempo),
quartil_3=quantile(tempo, type=5, 0.75))
print(descritivas_nova_base)
base_grupo <- group_by(nova_base, periodo)
View(base_grupo)
View(nova_base)
descritivas_base_grupo <- base_grupo %>% summarise(
mÃdia=mean(tempo),
desvio_pad=sd(tempo),
n_obs=n())
base_sem_grupo <- base_grupo %>% ungroup () %>% droplevels(.)
summarise(base_sem_grupo,
mean(tempo)) # informaÃ§Ãµes para a base completa
nova_base_grupos <- nova_base %>% group_by(periodo, perfil) %>%
summarise(tempo_mÃdio = mean(tempo),
mÃnimo = min(tempo),
mÃximo = max(tempo),
contagem = n()) %>%
arrange(desc(mÃximo))
View(nova_base_grupos)
filtro_1 <- nova_base[nova_base$tempo > 20,] # critÃ©rios antes da vÃ­rgula
filtro_2 <- nova_base[nova_base$tempo > 20 & nova_base$distancia < 25,]
filtro_5 <- nova_base[nova_base$tempo <=15 | nova_base$periodo == "Tarde",]
base_filtro_1 <- filter(nova_base, tempo > 20)
View(base_texto_1)
View(base_sem_grupo)
View(base_texto_2)
View(base_texto_valores)
base_filtro_2 <- filter(nova_base, tempo > 20 & distancia < 25)
base_filtro_4 <- filter(nova_base, periodo != "ManhÃ£" & between(tempo, 20, 50))
View(base_texto_1)
base_filtro_5 <- filter(nova_base, tempo <= 15 | periodo == "Tarde")
base_filtro_6 <- filter(nova_base, tempo > mean(tempo, na.rm = TRUE))
base_filtro_7 <- nova_base %>% group_by(periodo) %>%
filter(tempo > mean(tempo, na.rm=TRUE)) %>%
ungroup () %>% droplevels(.)
View(nova_base)
nova_base %>% slice(5:9) # com base na posiÃ§Ã£o das linhas
nova_base %>% slice_head(n=3) # as trÃªs primeiras linhas
nova_base %>% slice_tail(n=3) # as trÃªs Ãºltimas linhas
nova_base %>% slice_min(order_by = distancia, prop = 0.40) # os prop % menores
nova_base %>% slice_max(order_by = distancia, prop = 0.10) # os prop % maiores
dataset_inicial <- dataset_inicial %>% rename(observacoes=ObservaÃÃµes)
dataset_inicial <- dataset_inicial %>% rename(observacoes=Observacoes)
dataset_merge <- dataset_merge %>% rename(observacoes=Estudante)
base_left_join <- left_join(dataset_inicial, dataset_merge,
by = "observacoes")
View(base_left_join)
base_right_join <- right_join(dataset_inicial, dataset_merge,
by = "observacoes")
View(base_right_join)
dataset_inicial %>% right_join(dataset_merge, by = "observacoes")
base_inner_join <- inner_join(dataset_inicial, dataset_merge,
by = "observacoes")
View(base_inner_join)
base_full_join <- full_join(dataset_inicial, dataset_merge,
by = "observacoes")
View(base_full_join)
base_semi_join <- semi_join(dataset_inicial, dataset_merge,
by = "observacoes")
base_anti_join <- anti_join(dataset_inicial, dataset_merge,
by = "observacoes")
View(base_anti_join)
dataset_bind_1 <- tibble(var1 = c("obs1", "obs2", "obs3", "obs4"),
var2 = 1:4,
var3 = 10:13)
dataset_bind_2 <- tibble(var4 = c("obs1", "obs2", "obs3", "obs4"),
var5 = 100:103)
dataset_bind_4 <- tibble(var1 = c("obs5", "obs6", "obs7", "obs8", "obs9"),
var2 = 5:9,
var3 = 14:18)
dataset_bind_colunas <- bind_cols(dataset_bind_1, dataset_bind_2)
dataset_bind_1 %>% bind_cols(dataset_bind_3)
dataset_bind_linhas <- bind_rows(dataset_bind_1, dataset_bind_4)
atualizar <- function(histórico) {
atual <- ((histórico + 17)/2)
return(atual)
}
atualizar (1)
atualizar (2)
atualizar (3)
atualizar (4)
atualizar_hoje <- c(1:15)
ajustar <- function(valor1, valor2) {
ajuste <- ((valor1 + 180)/(valor2 - 60))
return(ajuste)
}
ajustar(100, 80)
ajustar(200, 80)
ajustar(200, 100)
valor <- 100000
valor <- 650000
if (valor >= 1000000) {
"nÃºmero grande"
} else if (valor >= 500000 & valor <1000000) {
"nÃºmero intermediÃ¡rio"
} else {
"nÃºmero pequeno"
}
atualizar_teto(44)
atualizar_teto(199)
ajustar_mult <- function(valor1, valor2) {
ajuste <- ((valor1 + 180)/(valor2 - 60))
if(ajuste <= 100) {
return("baixo")}
else if(ajuste > 100 & ajuste <= 1000) {
return("mÃ©dio")}
else {
return("alto")}
ajustar_mult(500, 300) # resultado = 2,8333
ajustar_mult(50000,100) # resultado = 1.254,50
ajustar_mult(1000, 70) # resultado = 118
mÃdias <- function(x) {
media <- mean(x, na.rm = T)
return(media)
}
mÃdias(nova_base$tempo)
mÃdias(nova_base$distancia)
mÃdias(nova_base$semaforos)
mÃdias(nova_base$tempo)
mÃdias(nova_base$distancia)
mÃdias(nova_base$semaforos)
percentil_var <- function(x) {
percentil <- quantile(x, probs=c(0.25, 0.50, 0.75), type=5, na.rm=T)
return(percentil)
}
percentil_var(nova_base$tempo)
percentil_var(nova_base$distancia)
percentil_var(nova_base$semaforos)
vetor_input <- c("tempo", "distancia", "semaforos")
map_dbl(nova_base[vetor_input], mean, na.rm = T)
map_dbl(nova_base[vetor_input], median, na.rm = T)
map_dbl(nova_base[vetor_input], sd, na.rm = T)
map(nova_base[vetor_input], quantile, probs=c(0.25, 0.50, 0.75), type=5, na.rm = T)
map(nova_base[vetor_input], ~ summary(., quantile.type = 5))
coef_var <- function(x) {
cv <- ((sd(x, na.rm=T))/(mean(x, na.rm=T)))*100
return(cv)
}
map_dbl(nova_base[vetor_input], coef_var)
map_dbl(nova_base[vetor_input], ~ (sd(., na.rm=T) / mean(., na.rm=T))*100)
map(nova_base, 5)
map_dbl(nova_base[vetor_input], coef_var)
map_dbl(nova_base[vetor_input], ~ (sd(., na.rm=T) / mean(., na.rm=T))*100)
map(nova_base, 5)
map_chr(nova_base, typeof)
map(nova_base, unique)
mÃdias_var <- list(5, 10, 15)
desv_pad_var <- list(1, 2, 3)
map2(mÃdias_var, desv_pad_var, rnorm, n = 5)
tamanho_var <- list(7, 9, 11)
parametros <- list(tamanho_var, mÃdias_var, desv_pad_var) # sequÃªncia da fÃ³rmula
parametros2 <- list(mean = mÃdias_var, sd = desv_pad_var, n = tamanho_var)
pmap(parametros2, rnorm
aplic_fun <- c("rnorm", "rpois")
parametros3 <- list(
list(mean = 10, sd = 5, n = 10),
list(lambda = 10 , n = 20)
)
invoke_map(aplic_fun, parametros3) # Argumentos fixos entrariam na sequÃªncia
63+3
3*5
65/65
log(213)
# Estudo R Studio
# Armazenar um objeto
x <- 3
x
# Vetores
y <- c(1,2,3,4,5,6) # com a funçaõ c() permite
# armazenar um vetor
y # visualizar
sequencia <- seq(from=1, to=20) # salvar uma sequencia
sequencia
lista <- seq(1,20) # outra forma de salvar
lista # visualizar
lista_2 <- 1:20
lista_2 <- 1:20 # salvar um a seq de 1 a 20
lista_2
animais <- c("macaco", "pato","galinha","porco") #vetore de string
animais
animais[2]
peso <- c(62, 70, 52, 98, 90, 70)
altura <- c(1.70, 1.82, 1.75, 1.94, 1.84, 1.61)
# calcular IMC
imc <peso/altura^2
# calcular IMC
imc <- peso/altura^2
imc
plot(imc)
hist(imc)
boxplot(imc)
# Matriz
x <- matrix(c(1:12), ncol=3) # gerando matrix
x
# Data Frames
data("iris")
data
# Data Frames
data(iris)
data
dados <- iris
data()
dados[1:10, 1:5]
names(dados)
dados[5]
dados[,5]
dados$Species
dados$Sepal.Length
dados$Petal.Length[dados$Petal.Length>6] <- NA
dados$Petal.Length
by(data=dados$Petal.Length, INDICES = dados$Species, FUN=summary)
by(Petal.Length, Species, summary)
attach(dados)
by(Petal.Length, Species, summary)
boxplot(Petal.Length ~ Species)
boxplot(Petal.Length ~ Species, xlab="Espécie", ylab="Tamanho da
Pétala", main="Tamanho da pétala por especie")
names(dados)
str(dados)
reame(dados)
rename(dados)
str(dados)
recorde(dados)
glimpse(dados)
base_covid <- read.csv("(2.2) WHO COVID-19 Global Table.csv",
header = TRUE,
sep = ",",
dec = ".")
dim(base_covid)
names(base_covid)
base_covid <- base_covid %>% rename(nome = 1,
regiao = 2,
casos_total = 3,
casos_relativo = 4,
casos_semana = 5,
casos_semana_relativo = 6,
casos_dia = 7,
mortes_total = 8,
mortes_relativo = 9,
mortes_semana = 10,
mortes_semana_relativo = 11,
mortes_dia = 12,
tipo_transmissao = 13)
names(base_covid)
names(base_covid)
